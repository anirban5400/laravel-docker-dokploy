services:
    app:
        build:
            context: .
            dockerfile: docker/app/Dockerfile
        container_name: laravel-app
        restart: unless-stopped
        depends_on:
            redis:
                condition: service_healthy
        env_file:
            - .env
        environment:
            - REDIS_PASSWORD=
        volumes:
            - ./storage:/var/www/storage
        networks:
            - laravel
        ports:
            - "8000:8000"
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    queue:
        build:
            context: .
            dockerfile: docker/queue/Dockerfile
        container_name: laravel-queue
        restart: unless-stopped
        depends_on:
            app:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env
        environment:
            - APP_ENV=production
            - REDIS_HOST=redis
            - REDIS_PASSWORD=
        volumes:
            - ./storage:/var/www/storage
        networks:
            - laravel
        healthcheck:
            test: ["CMD", "pgrep", "-f", "php artisan queue:work"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    scheduler:
        build:
            context: .
            dockerfile: docker/scheduler/Dockerfile
        container_name: laravel-scheduler
        restart: unless-stopped
        depends_on:
            app:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env
        environment:
            - APP_ENV=production
            - REDIS_HOST=redis
            - REDIS_PASSWORD=
        volumes:
            - ./storage:/var/www/storage
        networks:
            - laravel
        healthcheck:
            test: ["CMD-SHELL", "ps aux | grep -q 'php.*artisan.*schedule:work'"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    reverb:
        build:
            context: .
            dockerfile: docker/reverb/Dockerfile
        container_name: laravel-reverb
        restart: unless-stopped
        depends_on:
            app:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env
        environment:
            - APP_ENV=production
            - REVERB_SERVER_HOST=0.0.0.0
            - REVERB_SERVER_PORT=8080
            - REDIS_HOST=redis
        volumes:
            - ./storage:/var/www/storage
        networks:
            - laravel
        ports:
            - "8080:8080"
        healthcheck:
            test: ["CMD", "pgrep", "-f", "php artisan reverb:start"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s

    redis:
        build:
            context: .
            dockerfile: docker/redis/Dockerfile
        container_name: redis
        restart: unless-stopped
        networks:
            - laravel
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    # mongo:
    #     build:
    #         context: .
    #         dockerfile: docker/mongo/Dockerfile
    #     container_name: mongo
    #     restart: unless-stopped
    #     environment:
    #         - MONGO_INITDB_ROOT_USERNAME=admin
    #         - MONGO_INITDB_ROOT_PASSWORD=password
    #         - MONGO_INITDB_DATABASE=laravel
    #     networks:
    #         - laravel
    #     volumes:
    #         - mongo_data:/data/db
    #     ports:
    #         - "27017:27017"
    #     healthcheck:
    #         test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #         start_period: 30s

    # db:
    #     build:
    #         context: .
    #         dockerfile: docker/mysql/Dockerfile
    #     container_name: laravel-db
    #     restart: unless-stopped
    #     environment:
    #         - MYSQL_DATABASE=laravel
    #         - MYSQL_USER=laravel
    #         - MYSQL_PASSWORD=secret
    #         - MYSQL_ROOT_PASSWORD=root
    #     volumes:
    #         - db_data:/var/lib/mysql
    #     networks:
    #         - laravel
    #     ports:
    #         - "3306:3306"
    #     healthcheck:
    #         test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #         start_period: 30s

volumes:
    redis_data:
    # db_data:
    # mongo_data:

networks:
    laravel:
        driver: bridge
